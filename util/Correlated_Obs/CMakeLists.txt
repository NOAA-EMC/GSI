cmake_minimum_required(VERSION 2.6)
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
    # I am top-level project.
    if( NOT DEFINED ENV{CC} )
      find_path( crayComp "ftn" )
      find_path( wcossIntel "mpfort" )
      find_path( intelComp "ifort" )
      find_path( pgiComp "pgf90" )
      if( crayComp )
        message("Setting CrayLinuxEnvironment")
        set(CMAKE_SYSTEM_NAME "CrayLinuxEnvironment")
        set(CMAKE_C_COMPILER "${crayComp}/cc")
        set(CMAKE_CXX_COMPILER "${crayComp}/CC")
        set(CMAKE_Fortran_COMPILER "${crayComp}/ftn")
      endif()
      if( intelComp )
        set(ENV{CC} "icc")
        set(ENV{CXX} "icpc")
        set(ENV{FC} "ifort")
      endif()
      if( wcossIntel )
        message("Setting env for wcoss intel")
        set(ENV{CC} "mpcc")
        set(ENV{CXX} "mpCC")
        set(ENV{FC} "mpfort")
      endif()
      if( pgiComp )
        set(ENV{CC} "pgcc")
        set(ENV{CXX} "pgCC")
        set(ENV{FC} "pgf90")
      endif()
    endif()
    project(COV_Calc)
    enable_language (Fortran)
    find_package(OpenMP)
    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/../../cmake/Modules/")
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/setPlatformVariables.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/setIntelFlags.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/setGNUFlags.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/setPGIFlags.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/setHOST.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/Cheyenne.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/Discover.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/Generic.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/Gaea.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/Jet.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/S4.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/Theia.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/WCOSS-C.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/WCOSS-D.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/WCOSS.cmake)
    if (NOT CMAKE_BUILD_TYPE)
      set (CMAKE_BUILD_TYPE RELEASE CACHE STRING
        "Choose the type of build, options are: PRODUCTION Debug Release."
        FORCE)
    endif (NOT CMAKE_BUILD_TYPE)
    if (CMAKE_CXX_COMPILER_ID MATCHES "GNU*")
      message("Setting GNU flags")
      setGNU()
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
      message("Setting Intel flags")
      setIntel()
    elseif(CMAKE_C_COMPILER MATCHES "pgc*")
      message("Setting PGI flags")
      setPGI()
    endif()
    find_package(MPI REQUIRED)
    add_definitions(${MPI_Fortran_COMPILE_FLAGS})
    include_directories(${MPI_Fortran_INCLUDE_DIRS} ${MPI_INCLUDE_PATH} "./" ${CMAKE_INCLUDE_OUTPUT_DIRECTORY})
    link_directories(${MPI_Fortran_LIBRARIES} ${ARCHIVE_OUTPUT_PATH} )
    find_package( NetCDF REQUIRED)
    find_package(HDF5 COMPONENTS C HL Fortran_HL )
    set(NCDIAG_INCS "${PROJECT_BINARY_DIR}/libsrc/ncdiag")
    set(BUILD_NCDIAG ON)
    add_subdirectory(${PROJECT_SOURCE_DIR}/../../src/ncdiag ${PROJECT_BINARY_DIR}/libsrc/ncdiag)
    set(NCDIAG_LIBRARIES ncdiag )
endif()
  set(COV_CALC_SRC ${CMAKE_CURRENT_SOURCE_DIR}/cov_calc.f90 ${CMAKE_CURRENT_SOURCE_DIR}/cconstants.f90 ${CMAKE_CURRENT_SOURCE_DIR}/ckinds.f90 ${CMAKE_CURRENT_SOURCE_DIR}/matrix_tools.f90 ${CMAKE_CURRENT_SOURCE_DIR}/obs_tools.f90 ${CMAKE_CURRENT_SOURCE_DIR}/pairs.f90 ${CMAKE_CURRENT_SOURCE_DIR}/readsatobs.f90 ${CMAKE_CURRENT_SOURCE_DIR}/read_diag.f90 )
message("HEY!! openmp flag is ${OpenMP_Fortran_FLAGS} and libraries are  ${OpenMP_Fortran_LIBRARIES}") 
#message("HEY!! coreincs is ${CORE_INCS}")
message("ncdiag is ${NCDIAG_LIBRARIES}")
  set_source_files_properties( ${COV_CALC_SRC} PROPERTIES COMPILE_FLAGS ${COV_CALC_FLAGS} )
  add_executable(cov_calc  ${COV_CALC_SRC} )
  add_dependencies(cov_calc ${NCDIAG_LIBRARIES}) 
  set_target_properties( cov_calc PROPERTIES COMPILE_FLAGS ${COV_CALC_FLAGS} )
  include_directories( ${CORE_INCS} ${NETCDF_INCLUDE_DIRS} ${NCDIAG_INCS}) 
#  target_link_libraries( cov_calc ${W3NCO_LIBRARY} )
  target_link_libraries( cov_calc ${OpenMP_Fortran_LIBRARIES} ${NCDIAG_LIBRARIES} ${NETCDF_Fortran_LIBRARIES} ${NETCDF_C_LIBRARIES} ${MPI_Fortran_LIBRARIES})
  if(BUILD_COV_CALC)
#    add_dependencies( cov_calc ${W3NCO_LIBRARY} )
#    add_dependencies( cov_calc ${OpenMP_Fortran_LIBRARIES} )
  endif()

