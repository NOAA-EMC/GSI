#bin/sh
################################################################################
####  UNIX Script Documentation Block
#                      .                                             .
# Script name:         exnam_vrfminmon.sh.ecf
# Script description:  Runs data extract/validation for GSI normalization diag data
#
# Author:        Ed Safford       Org: NP23         Date: 2015-04-10
#
# Abstract: This script runs the data extract/validation portion of the 
#           MinMon package.  
#
# Script history log:
# 2015-04-10  Ed Safford
#
#   Input script positional parameters:
#     1             Current analysis date in yyyymmddhh format
#                   defaults to PDY; required
#     2             cycle time in cc format
#                   defaults to cyc; required
#
#   Imported Shell Variables:
#     M_TANKverf    repository for minmon data files
#     DATA          data working space
#     MINMON_SUFFIX data set identifier, defaults to GDAS
#     FIXnam        fixed file directory, nam specific
#     FIXminmon     fixed file directory
#     USHminmon     scripts directory
#     PDY           processing day; 
#                   overridden by 1
#     cyc	    processing cycle; 
#                   overridden by 2
#     
#   Exported Shell Variables:
#     PDATE	    Processing date
#     err           last return code
#     VERBOSE       switches on more/less log output
#     mm_gnormfile  $GDASfix/nam_minmon_gnorm.txt file
#     mm_costfile   $GDASfix/nam_minmon_cost.txt file
#
#   Modules and files referenced:
#     scripts    : ${USHminmon}/minmon_xtrct_gnorms.pl
#                  ${USHminmon}/minmon_xtrct_costs.pl
#                  ${USHminmon}/minmon_xtrct_reduction.pl
#
#     programs   : $NDATE
#
#     input data : $gsistat=${COMIN}/nam.fit2.t${cyc}z
#
#     output data:  
#
#  Remarks:
#
#    Condition codes
#       0 - no problem encountered
#      >0 - some problem encountered
#
################################################################################


########################################
#  Set environment
########################################
export VERBOSE=${VERBOSE:-"NO"} 
if [[ "$VERBOSE" = "YES" ]]
then
   set -x
fi

export scr=exnam_vrfyminmon.sh.ecf

msg="${scr} HAS STARTED"
postmsg "$jlogfile" "$msg"

export RUN_ENVIR=${RUN_ENVIR:-nco}
export NET=${NET:-nam}
export RUN=${RUN:-nam}
export envir=${envir:-prod}

########################################
#  Command line arguments
########################################
export PDY=${1:-${PDY:?}} 
export cyc=${2:-${cyc:?}}

########################################
#  Directories
########################################
export DATA=${DATA:-$(pwd)}

# export HOMEgdas=${HOMEgdas:-/${NWROOT}/gdas_minmon.v${gdas_minmon_ver}}

########################################
#  Filenames
########################################
#gsistat=${gsistat:-$COMIN/gdas1.t${cyc}z.gsistat}
export mm_gnormfile=${gnormfile:-${FIXnam}/nam_minmon_gnorm.txt}
export mm_costfile=${costfile:-${FIXnam}/nam_minmon_cost.txt}

########################################
#  Other variables
########################################
export MINMON_SUFFIX=${MINMON_SUFFIX:-nam}
export PDATE=${PDY}${cyc}
export NCP=${NCP:-/bin/cp}
export NDATE=${NDATE:-/nwprod/util/exec/ndate}
export pgm=exgdas_vrfminmon.sh.ecf

#########################################################
# M_TANKverf is storage location for generated files
#########################################################
export M_TANKverf=${M_TANKverf:-${COMROOT}/verf/${envir}/minmon_${MINMON_SUFFIX}.${PDY}}
export M_TANKverfM1=${M_TANKverfM1:-${COMROOT}/verf/${envir}/minmmon_${MINMON_SUFFIX}.${PDYm1}}
#####################################################################

if [[ ! -d ${DATA} ]]; then
   mkdir $DATA
fi
cd $DATA

######################################################################

data_available=0

if [[ -s ${gsistat} ]]; then

   data_available=1                                         

   #------------------------------------------------------------------
   #  Copy the $MINMON_SUFFIX.gnorm_data.txt file to the working directory
   #  It's ok if it doesn't exist; we'll create a new one if needed.
   #------------------------------------------------------------------
   if [[ -s ${M_TANKverf}/${MINMON_SUFFIX}.gnorm_data.txt ]]; then
      $NCP ${M_TANKverf}/${MINMON_SUFFIX}.gnorm_data.txt gnorm_data.txt 
   elif [[ -s ${M_TANKverf}/gnorm_data.txt ]]; then
      $NCP ${M_TANKverf}/gnorm_data.txt gnorm_data.txt 
   elif [[ -s ${M_TANKverfM1}/${MINMON_SUFFIX}.gnorm_data.txt ]]; then
      $NCP ${M_TANKverfM1}/${MINMON_SUFFIX}.gnorm_data.txt gnorm_data.txt 
   elif [[ -s ${M_TANKverfM1}/gnorm_data.txt ]]; then
      $NCP ${M_TANKverfM1}/gnorm_data.txt gnorm_data.txt
   fi

   #------------------------------------------------------------------
   #   Run the child sccripts.
   #------------------------------------------------------------------
   ${USHminmon}/minmon_xtrct_costs.pl ${MINMON_SUFFIX} ${PDY} ${cyc} ${gsistat} ${jlogfile}
   rc_costs=$?
   echo "rc_costs = $rc_costs"

   ${USHminmon}/minmon_xtrct_gnorms.pl ${MINMON_SUFFIX} ${PDY} ${cyc} ${gsistat} ${jlogfile}
   rc_gnorms=$?
   echo "rc_gnorms = $rc_gnorms"

   ${USHminmon}/minmon_xtrct_reduct.pl ${MINMON_SUFFIX} ${PDY} ${cyc} ${gsistat} ${jlogfile}
   rc_reduct=$?
   echo "rc_reduct = $rc_reduct"

fi

#####################################################################
# Postprocessing

err=0
if [[ ${data_available} -ne 1 ]]; then
   err=1
elif [[ $rc_costs -ne 0 ]]; then
   err=$rc_costs
elif [[ $rc_gnorms -ne 0 ]]; then
   err=$rc_gnorms
elif [[ $rc_reduct -ne 0 ]]; then
   err=$rc_reduct
fi

if [[ "$VERBOSE" = "YES" ]]; then
   echo "end exgdas_vrfminmon.sh.ecf, exit value = ${err}"
fi

msg="${scr} HAS ENDED"
postmsg "$jlogfile" "$msg"

set +x
exit ${err}

