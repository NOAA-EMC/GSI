From setupps.f90:

 cdiagbuf(ii)    = station_id         ! station id

        rdiagbuf(1,ii)  = ictype(ikx)        ! observation type
        rdiagbuf(2,ii)  = icsubtype(ikx)     ! observation subtype
        rdiagbuf(3,ii)  = data(ilate,i)      ! observation latitude (degrees)
        rdiagbuf(4,ii)  = data(ilone,i)      ! observation longitude (degrees)
        rdiagbuf(5,ii)  = data(istnelv,i)    ! station elevation (meters)
        rdiagbuf(6,ii)  = data(ipres,i)*r10  ! observation pressure (hPa)
        rdiagbuf(7,ii)  = dhgt               ! observation height (meters)
        rdiagbuf(8,ii)  = dtime-time_offset  ! obs time (hours relative to analysis time)

        rdiagbuf(9,ii)  = data(iqc,i)        ! input prepbufr qc or event mark
        rdiagbuf(10,ii) = var_jb             ! non linear qc parameter
        rdiagbuf(11,ii) = data(iuse,i)       ! read_prepbufr data usage flag
        if(muse(i)) then
           rdiagbuf(12,ii) = one             ! analysis usage flag (1=use, -1=not used)
        else
           rdiagbuf(12,ii) = -one
        endif

        rdiagbuf(13,ii) = rwgt               ! nonlinear qc relative weight
        rdiagbuf(14,ii) = errinv_input       ! prepbufr inverse obs error (hPa**-1)
        rdiagbuf(15,ii) = errinv_adjst       ! read_prepbufr inverse obs error (hPa**-1)
        rdiagbuf(16,ii) = errinv_final       ! final inverse observation error (hPa**-1)

        rdiagbuf(17,ii) = pob                ! surface pressure observation (hPa)
        rdiagbuf(18,ii) = pob-pges           ! obs-ges used in analysis (coverted to hPa)
        rdiagbuf(19,ii) = pob-pgesorig       ! obs-ges w/o adjustment to guess surface pressure (hPa)
        rdiagbuf(20,ii) = 1.e+10_r_single    ! spread (filled in by EnKF)


>ncdump -h diag_conv_ps_ges.2020051806.nc4
netcdf diag_conv_ps_ges.2020051806 {
dimensions:
        nobs = UNLIMITED ; // (81624 currently)
        Station_ID_maxstrlen = 8 ;
        Observation_Class_maxstrlen = 7 ;
variables:
        char Station_ID(nobs, Station_ID_maxstrlen) ;
        char Observation_Class(nobs, Observation_Class_maxstrlen) ;
        int Observation_Type(nobs) ;
        int Observation_Subtype(nobs) ;
        float Latitude(nobs) ;
        float Longitude(nobs) ;
        float Station_Elevation(nobs) ;
        float Pressure(nobs) ;
        float Height(nobs) ;
        float Time(nobs) ;
        float Prep_QC_Mark(nobs) ;
        float Prep_Use_Flag(nobs) ;
        float Nonlinear_QC_Var_Jb(nobs) ;
        float Nonlinear_QC_Rel_Wgt(nobs) ;
        float Analysis_Use_Flag(nobs) ;
        float Errinv_Input(nobs) ;
        float Errinv_Adjust(nobs) ;
        float Errinv_Final(nobs) ;
        float Observation(nobs) ;
        float Obs_Minus_Forecast_adjusted(nobs) ;
        float Obs_Minus_Forecast_unadjusted(nobs) ;

// global attributes:
                :date_time = 2020051806 ;
}

from setupq.f90:
        rdiagbufp(1,iip)  = ictype(ikx)        ! observation type
        rdiagbufp(2,iip)  = icsubtype(ikx)     ! observation subtype

        rdiagbufp(3,iip)  = data(ilate,i)      ! observation latitude (degrees)
        rdiagbufp(4,iip)  = data(ilone,i)      ! observation longitude (degrees)
        rdiagbufp(5,iip)  = data(istnelv,i)    ! station elevation (meters)
        rdiagbufp(6,iip)  = prest !presq              ! observation pressure (hPa)
        rdiagbufp(7,iip)  = data(iobshgt,i)    ! observation height (meters)
        rdiagbufp(8,iip)  = dtime-time_offset  ! obs time (hours relative to analysis time)

        rdiagbufp(9,iip)  = data(iqc,i)        ! input prepbufr qc or event mark
        rdiagbufp(10,iip) = var_jb             ! non linear qc b parameter
        rdiagbufp(11,iip) = data(iuse,i)       ! read_prepbufr data usage flag
        if(muse(i)) then
           rdiagbufp(12,iip) = one             ! analysis usage flag (1=use, -1=not used)
        else
           rdiagbufp(12,iip) = -one
        endif

        rdiagbufp(13,iip) = rwgt               ! nonlinear qc relative weight
        rdiagbufp(14,iip) = errinv_input       ! prepbufr inverse observation error
        rdiagbufp(15,iip) = errinv_adjst       ! read_prepbufr inverse obs error
        rdiagbufp(16,iip) = errinv_final       ! final inverse observation error

        rdiagbufp(17,iip) = data(iqob,i)       ! observation
        rdiagbufp(18,iip) = ddiff              ! obs-ges used in analysis
        rdiagbufp(19,iip) = ddiff              !qob-qges           ! obs-ges w/o bias correction (future slot)

        rdiagbufp(20,iip) = qsges              ! guess saturation specific humidity
        rdiagbufp(21,iip) = 1e+10_r_single     ! spread (filled in by EnKF)


netcdf diag_conv_q_ges.2020051806 {
dimensions:
        nobs = UNLIMITED ; // (50283 currently)
        Station_ID_maxstrlen = 8 ;
        Observation_Class_maxstrlen = 7 ;
variables:
        char Station_ID(nobs, Station_ID_maxstrlen) ;
        char Observation_Class(nobs, Observation_Class_maxstrlen) ;
        int Observation_Type(nobs) ;
        int Observation_Subtype(nobs) ;
        float Latitude(nobs) ;
        float Longitude(nobs) ;
        float Station_Elevation(nobs) ;
        float Pressure(nobs) ;
        float Height(nobs) ;
        float Time(nobs) ;
        float Prep_QC_Mark(nobs) ;
        float Prep_Use_Flag(nobs) ;
        float Nonlinear_QC_Var_Jb(nobs) ;
        float Nonlinear_QC_Rel_Wgt(nobs) ;
        float Analysis_Use_Flag(nobs) ;
        float Errinv_Input(nobs) ;
        float Errinv_Adjust(nobs) ;
        float Errinv_Final(nobs) ;
        float Observation(nobs) ;
        float Obs_Minus_Forecast_adjusted(nobs) ;
        float Obs_Minus_Forecast_unadjusted(nobs) ;
        float Forecast_Saturation_Spec_Hum(nobs) ;

// global attributes:
                :date_time = 2020051806 ;
}

from setupt.f90:

    rdiagbufp(1,iip)  = ictype(ikx)        ! observation type
    rdiagbufp(2,iip)  = icsubtype(ikx)     ! observation subtype
    rdiagbuf(3,ii)  = data(ilate,i)      ! observation latitude (degrees)
    rdiagbuf(4,ii)  = data(ilone,i)      ! observation longitude (degrees)
    rdiagbuf(5,ii)  = data(istnelv,i)    ! station elevation (meters)
    rdiagbuf(6,ii)  = prest              ! observation pressure (hPa)
    rdiagbuf(7,ii)  = data(iobshgt,i)    ! observation height (meters)
    rdiagbuf(8,ii)  = dtime-time_offset  ! obs time (hours relative to analysis time)

    rdiagbuf(9,ii)  = data(iqc,i)        ! input prepbufr qc or event mark
    rdiagbuf(10,ii) = data(iqt,i)        ! setup qc or event mark
    rdiagbuf(11,ii) = data(iuse,i)       ! read_prepbufr data usage flag
    if(muse(i)) then
       rdiagbuf(12,ii) = one             ! analysis usage flag (1=use, -1=not used)
    else
       rdiagbuf(12,ii) = -one
    endif

!rdiagbuf(13,ii) is the combination of var_jb and non-linear qc relative weight
! in the format of:  var_jb*1.0e+6 + rwgt
    rdiagbuf(13,ii) = var_jb*1.0e+6_r_single + rwgt ! combination of var_jb and rwgt
    rdiagbuf(14,ii) = errinv_input       ! prepbufr inverse obs error (K**-1)
    rdiagbuf(15,ii) = errinv_adjst       ! read_prepbufr inverse obs error (K**-1)
    rdiagbuf(16,ii) = errinv_final       ! final inverse observation error (K**-1)

    rdiagbuf(17,ii) = data(itob,i)       ! temperature observation (K)
    rdiagbuf(18,ii) = ddiff              ! obs-ges used in analysis (K)
    rdiagbuf(19,ii) = tob-tges           ! obs-ges w/o bias correction (K) (future slot)
    rdiagbuf(20,ii) = 1.e10_r_single     ! spread (filled in by EnKF)
    if (aircraft_t_bc_pof .or. aircraft_t_bc .or. aircraft_t_bc_ext) then
       rdiagbuf(20,ii) = data(ipof,i)       ! data pof
       rdiagbuf(21,ii) = data(ivvlc,i)      ! data vertical velocity
       do j=1,npredt
          rdiagbuf(21+j,ii) = predbias(j)


netcdf diag_conv_t_ges.2020051806 {
dimensions:
        nobs = UNLIMITED ; // (100806 currently)
        Station_ID_maxstrlen = 8 ;
        Observation_Class_maxstrlen = 7 ;
        Bias_Correction_Terms_arr_dim = 3 ;
variables:
        char Station_ID(nobs, Station_ID_maxstrlen) ;
        char Observation_Class(nobs, Observation_Class_maxstrlen) ;
        int Observation_Type(nobs) ;
        float Latitude(nobs) ;
        float Longitude(nobs) ;
        float Station_Elevation(nobs) ;
        float Pressure(nobs) ;
        float Height(nobs) ;
        float Time(nobs) ;
        float Prep_QC_Mark(nobs) ;
        float Setup_QC_Mark(nobs) ;
        float Prep_Use_Flag(nobs) ;
        float Analysis_Use_Flag(nobs) ;
        float Nonlinear_QC_Rel_Wgt(nobs) ;
        float Errinv_Input(nobs) ;
        float Errinv_Adjust(nobs) ;
        float Errinv_Final(nobs) ;
        float Observation(nobs) ;
        float Obs_Minus_Forecast_adjusted(nobs) ;
        float Obs_Minus_Forecast_unadjusted(nobs) ;
        float Data_Pof(nobs) ;
        float Bias_Correction_Terms(nobs, Bias_Correction_Terms_arr_dim) ;

// global attributes:
                :Number_of_Predictors = 3 ;
                :date_time = 2020051806 ;
}


netcdf diag_conv_uv_ges.2020051806 {
dimensions:
        nobs = UNLIMITED ; // (1766025 currently)
        Station_ID_maxstrlen = 8 ;
        Observation_Class_maxstrlen = 7 ;
variables:
        char Station_ID(nobs, Station_ID_maxstrlen) ;
        char Observation_Class(nobs, Observation_Class_maxstrlen) ;
        int Observation_Type(nobs) ;
        int Observation_Subtype(nobs) ;
        float Latitude(nobs) ;
        float Longitude(nobs) ;
        float Station_Elevation(nobs) ;
        float Pressure(nobs) ;
        float Height(nobs) ;
        float Time(nobs) ;
        float Prep_QC_Mark(nobs) ;
        float Setup_QC_Mark(nobs) ;
        float Prep_Use_Flag(nobs) ;
        float Analysis_Use_Flag(nobs) ;
        float Nonlinear_QC_Rel_Wgt(nobs) ;
        float Errinv_Input(nobs) ;
        float Errinv_Adjust(nobs) ;
        float Errinv_Final(nobs) ;
        float Wind_Reduction_Factor_at_10m(nobs) ;
        float u_Observation(nobs) ;
        float u_Obs_Minus_Forecast_adjusted(nobs) ;
        float u_Obs_Minus_Forecast_unadjusted(nobs) ;
        float v_Observation(nobs) ;
        float v_Obs_Minus_Forecast_adjusted(nobs) ;
        float v_Obs_Minus_Forecast_unadjusted(nobs) ;

// global attributes:
                :date_time = 2020051806 ;
}

from setupw.f90:
 rdiagbuf(1,ii)  = ictype(ikx)        ! observation type
        rdiagbuf(2,ii)  = icsubtype(ikx)     ! observation subtype

        rdiagbuf(3,ii)  = data(ilate,i)      ! observation latitude (degrees)
        rdiagbuf(4,ii)  = data(ilone,i)      ! observation longitude (degrees)
        rdiagbuf(5,ii)  = data(ielev,i)      ! station elevation (meters)
        rdiagbuf(6,ii)  = presw              ! observation pressure (hPa)
        rdiagbuf(7,ii)  = data(ihgt,i)       ! observation height (meters)
        rdiagbuf(8,ii)  = dtime-time_offset  ! obs time (hours relative to analysis time)

        rdiagbuf(9,ii)  = data(iqc,i)        ! input prepbufr qc or event mark
        rdiagbuf(10,ii) = var_jb             ! non linear qc parameter
        rdiagbuf(11,ii) = data(iuse,i)       ! read_prepbufr data usage flag
        if(muse(i)) then
           rdiagbuf(12,ii) = one             ! analysis usage flag (1=use, -1=not used)
        else
           rdiagbuf(12,ii) = -one
        endif

        rdiagbuf(13,ii) = rwgt               ! nonlinear qc relative weight
        rdiagbuf(14,ii) = errinv_input       ! prepbufr inverse obs error (m/s)**-1
        rdiagbuf(15,ii) = errinv_adjst       ! read_prepbufr inverse obs error (m/s)**-1
        rdiagbuf(16,ii) = errinv_final       ! final inverse observation error (m/s)**-1

        rdiagbuf(17,ii) = data(iuob,i)       ! u wind component observation (m/s)
        rdiagbuf(18,ii) = dudiff             ! u obs-ges used in analysis (m/s)
        rdiagbuf(19,ii) = uob-ugesin         ! u obs-ges w/o bias correction (m/s) (future slot)

        rdiagbuf(20,ii) = data(ivob,i)       ! v wind component observation (m/s)
        rdiagbuf(21,ii) = dvdiff             ! v obs-ges used in analysis (m/s)
        rdiagbuf(22,ii) = vob-vgesin         ! v obs-ges w/o bias correction (m/s) (future slot)



netcdf diag_conv_gps_anl.2020040506 {
dimensions:
        nobs = UNLIMITED ; // (353443 currently)
        Station_ID_maxstrlen = 8 ;
        Observation_Class_maxstrlen = 7 ;
variables:
        char Station_ID(nobs, Station_ID_maxstrlen) ;
        char Observation_Class(nobs, Observation_Class_maxstrlen) ;
        int Observation_Type(nobs) ;
        int Observation_Subtype(nobs) ;
        float Latitude(nobs) ;
        float Longitude(nobs) ;
        float Incremental_Bending_Angle(nobs) ;
        float Pressure(nobs) ;
        float Height(nobs) ;
        float Time(nobs) ;
        float Model_Elevation(nobs) ;
        float Setup_QC_Mark(nobs) ;
        float Prep_Use_Flag(nobs) ;
        float Analysis_Use_Flag(nobs) ;
        float Nonlinear_QC_Rel_Wgt(nobs) ;
        float Errinv_Input(nobs) ;
        float Errinv_Adjust(nobs) ;
        float Errinv_Final(nobs) ;
        float Observation(nobs) ;
        float Obs_Minus_Forecast_adjusted(nobs) ;
        float Obs_Minus_Forecast_unadjusted(nobs) ;
        float GPS_Type(nobs) ;
        float Temperature_at_Obs_Location(nobs) ;
        float Specific_Humidity_at_Obs_Location(nobs) ;

// global attributes:
                :date_time = 2020040506 ;
}

  from setupbend.f90:

     rdiagbuf(1,i)         = ictype(ikx)        ! observation type
     rdiagbuf(2,i)         = data(iprof,i)      ! profile identifier
     rdiagbuf(3,i)         = data(ilate,i)      ! lat in degrees
     rdiagbuf(4,i)         = data(ilone,i)      ! lon in degrees
     rdiagbuf( 5,i)        = (data(igps,i)-dbend)/data(igps,i) ! incremental bending angle (x100 %)
     rdiagbuf(6,i)         = ten*exp(dpressure) ! pressure at obs location (hPa) if monotone grid
     rdiagbuf(7,i)         = tpdpres(i)-rocprof ! impact height in meters
     rdiagbuf(8,i)         = dtime-time_offset  ! obs time (hours relative to analysis time)
     rdiagbuf(9,i)         = zsges              ! model terrain (m)
     rdiagbuf(10,ii)       = id_qc              ! setup qc or event mark
     rdiagbuf(11,i)        = data(iuse,i)       ! data usage flag
     rdiagbuf(12,ii)       = one                ! analysis usage flag (1=use, -1=not used)
     rdiagbuf(13,i)        = zero               ! nonlinear qc relative weight - will be defined in genstats_gps
     rdiagbuf(14,i)        = errinv_input       ! original inverse gps obs error (rad**-1)
     rdiagbuf(15,i)        = errinv_adjst       ! original + represent error inverse gps
                                                ! obs error (rad**-1)
     rdiagbuf(16,i)        = errinv_final       ! final inverse observation error due to
                                                ! superob factor (rad**-1) and qc
                                                ! modified in genstats_gps
     rdiagbuf(17,i)        = data(igps,i)       ! bending angle observation (radians)
     rdiagbuf(18,i)        = trefges            ! temperature at obs location (Kelvin) if monotone grid
     rdiagbuf(19,i)        = hob                ! model vertical grid (interface) if monotone grid
     rdiagbuf(20,i)        = one                ! uses gps_ref (one = use of bending angle)
     rdiagbuf(21,i)        = qrefges            ! specific humidity at obs location (kg/kg) if monotone grid
     rdiagbuf(22,i)        = 1.e+10_r_kind      ! spread (filled in by EnKF)



SST --- sea surface temperature

        rdiagbuf(1,ii)  = ictype(ikx)        ! observation type
        rdiagbuf(2,ii)  = icsubtype(ikx)     ! observation subtype

        rdiagbuf(3,ii)  = data(ilate,i)      ! observation latitude (degrees)
        rdiagbuf(4,ii)  = data(ilone,i)      ! observation longitude (degrees)
        rdiagbuf(5,ii)  = data(istnelv,i)    ! station elevation (meters)
        rdiagbuf(6,ii)  = data(itemp,i)      ! background open water temperature (K)
        rdiagbuf(7,ii)  = data(izob,i)       ! observation depth (meters)
        rdiagbuf(8,ii)  = dtime-time_offset  ! obs time (hours relative to analysis time)

        rdiagbuf(9,ii)  = data(ipct,i)       ! open water percentage (0 to 1)
        rdiagbuf(10,ii) = id_qc              ! setup qc or event mark
        rdiagbuf(11,ii) = data(iuse,i)       ! read_prepbufr data usage flag
        if(muse(i)) then
           rdiagbuf(12,ii) = one             ! analysis usage flag (1=use, -1=not used)
        else
           rdiagbuf(12,ii) = -one
        endif


        rdiagbuf(13,ii) = rwgt               ! nonlinear qc relative weight
        rdiagbuf(14,ii) = errinv_input       ! prepbufr inverse obs error (K**-1)
        rdiagbuf(15,ii) = errinv_adjst       ! read_prepbufr inverse obs error (K**-1)
        rdiagbuf(16,ii) = errinv_final       ! final inverse observation error (K**-1)

        rdiagbuf(17,ii) = data(isst,i)       ! SST observation (K)
        rdiagbuf(18,ii) = ddiff              ! obs-ges used in analysis (K)
        rdiagbuf(19,ii) = data(isst,i)-sstges! obs-ges w/o bias correction (K) (future slot)

        rdiagbuf(20,ii) = data(iotype,i)     ! type of measurement
        if (nst_gsi>0) then
          rdiagbuf(maxinfo+1,ii) = data(itref,i)    ! Tr
          rdiagbuf(maxinfo+2,ii) = data(idtw,i)     ! dt_warm at zob
          rdiagbuf(maxinfo+3,ii) = data(idtc,i)     ! dt_cool at zob
          rdiagbuf(maxinfo+4,ii) = data(itz_tr,i)   ! d(tz)/d(Tr) at zob
        endif


dimensions:
        nobs = UNLIMITED ; // (20485 currently)
        Station_ID_maxstrlen = 8 ;
        Observation_Class_maxstrlen = 7 ;
variables:
        char Station_ID(nobs, Station_ID_maxstrlen) ;
        char Observation_Class(nobs, Observation_Class_maxstrlen) ;
        int Observation_Type(nobs) ;
        int Observation_Subtype(nobs) ;
        float Latitude(nobs) ;
        float Longitude(nobs) ;
        float Station_Elevation(nobs) ;
        float Pressure(nobs) ;
        float Height(nobs) ;
        float Time(nobs) ;
        float Prep_QC_Mark(nobs) ;
        float Prep_Use_Flag(nobs) ;
        float Nonlinear_QC_Rel_Wgt(nobs) ;
        float Analysis_Use_Flag(nobs) ;
        float Errinv_Input(nobs) ;
        float Errinv_Adjust(nobs) ;
        float Errinv_Final(nobs) ;
        float Observation(nobs) ;
        float Obs_Minus_Forecast_adjusted(nobs) ;
        float Obs_Minus_Forecast_unadjusted(nobs) ;
        float FoundationTempBG(nobs) ;
        float DiurnalWarming_at_zob(nobs) ;
        float SkinLayerCooling_at_zob(nobs) ;
        float Sensitivity_Tzob_Tr(nobs) ;

// global attributes:
                :date_time = 2020040306 ;
                :_NCProperties = "version=2,netcdf=4.7.4-development,hdf5=1.10.6," ;

