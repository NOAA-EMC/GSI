cmake_minimum_required(VERSION 2.8)
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
    # I am top-level project.
    if( NOT DEFINED ENV{CC} )
      find_path( crayComp "ftn" )
      find_path( wcossIntel "mpfort" )
      find_path( intelComp "ifort" )
      find_path( pgiComp "pgf90" )
      if( crayComp )
        message("Setting CrayLinuxEnvironment")
        set(CMAKE_SYSTEM_NAME "CrayLinuxEnvironment")
        set(CMAKE_C_COMPILER "${crayComp}/cc")
        set(CMAKE_CXX_COMPILER "${crayComp}/CC")
        set(CMAKE_Fortran_COMPILER "${crayComp}/ftn")
      endif()
      if( intelComp )
        set(ENV{CC} "icc")
        set(ENV{CXX} "icpc")
        set(ENV{FC} "ifort")
      endif()
      if( wcossIntel )
        message("Setting env for wcoss intel")
        set(ENV{CC} "mpcc")
        set(ENV{CXX} "mpCC")
        set(ENV{FC} "mpfort")
      endif()
      if( pgiComp )
        set(ENV{CC} "pgcc")
        set(ENV{CXX} "pgCC")
        set(ENV{FC} "pgf90")
      endif()
    endif()
    project(COV_Calc)
    enable_language (Fortran)
    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/../../cmake/Modules/")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/setPlatformVariables.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/setIntelFlags.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/setGNUFlags.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/setPGIFlags.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/setHOST.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/Cheyenne.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/Discover.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/Generic.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/Gaea.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/Jet.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/S4.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/Hera.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/WCOSS-C.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/WCOSS-D.cmake)
    include(${CMAKE_SOURCE_DIR}/../../cmake/Modules/platforms/WCOSS.cmake)
    if (NOT CMAKE_BUILD_TYPE)
      set (CMAKE_BUILD_TYPE RELEASE CACHE STRING
        "Choose the type of build, options are: PRODUCTION Debug Release."
        FORCE)
    endif (NOT CMAKE_BUILD_TYPE)
    if (CMAKE_CXX_COMPILER_ID MATCHES "GNU*")
      message("Setting GNU flags")
      setGNU()
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
      message("Setting Intel flags")
      setIntel()
    elseif(CMAKE_C_COMPILER MATCHES "pgc*")
      message("Setting PGI flags")
      setPGI()
    endif()

    cmake_policy(SET CMP0009 NEW)
    find_package(OpenMP)
    message("found openmp with flag ${OPENMP_Fortran_FLAGS}")

#   Set Host specific flags and options
    setHOST()

    if(FIND_HDF5_HL)
      find_package(HDF5 COMPONENTS C HL Fortran_HL )
    elseif(FIND_HDF5)
      find_package(HDF5)
    endif()

    find_package(MPI REQUIRED)
    message("MPI version is ${MPI_Fortran_VERSION}")
    message("MPI f90 version is ${MPI_Fortran_HAVE_F90_MODULE}")
    message("MPI f08 version is ${MPI_Fortran_HAVE_F08_MODULE}")

    add_definitions(${MPI_Fortran_COMPILE_FLAGS})
    include_directories(${MPI_Fortran_INCLUDE_DIRS} ${MPI_INCLUDE_PATH} "./" ${CMAKE_INCLUDE_OUTPUT_DIRECTORY})
    link_directories(${MPI_Fortran_LIBRARIES} ${ARCHIVE_OUTPUT_PATH} )
    find_package( NetCDF REQUIRED)
    if(NETCDF4)
      if(CMAKE_MAJOR_VERSION GREATER 2)
        find_package( ZLIB )
      endif()
      find_package( CURL )
    endif()

    find_package( W3NCO )

    set(BUILD_NCDIAG ON)
    set(NCDIAG_INCS "${PROJECT_BINARY_DIR}/libsrc/ncdiag")
    add_subdirectory(${PROJECT_SOURCE_DIR}/../../src/ncdiag ${PROJECT_BINARY_DIR}/libsrc/ncdiag)
    set(NCDIAG_LIBRARIES ncdiag )
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
endif()

add_subdirectory(nwprod/radmon_shared.v3.0.0/sorc/verf_radang.fd)
add_subdirectory(nwprod/radmon_shared.v3.0.0/sorc/verf_radbcoef.fd)
add_subdirectory(nwprod/radmon_shared.v3.0.0/sorc/verf_radbcor.fd)
add_subdirectory(nwprod/radmon_shared.v3.0.0/sorc/verf_radtime.fd)
add_subdirectory(data_extract/sorc/radmon_mk_base.fd)
add_subdirectory(data_extract/sorc/radmon_validate_tm.fd)
add_subdirectory(image_gen/src/radmon_ig_angle.fd)
add_subdirectory(image_gen/src/radmon_ig_bcoef.fd)
add_subdirectory(image_gen/src/radmon_ig_horiz.fd)
add_subdirectory(image_gen/src/radmon_ig_summary.fd)
add_subdirectory(image_gen/src/radmon_ig_time.fd)
