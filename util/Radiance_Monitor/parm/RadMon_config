##################################################################
#
# RadMon_config
#
# This parameter file set up the environment variables used in
# scripts to run the radiance monitor package components.
#
##################################################################

  echo "begin RadMon_config"

# This defines the monitor value used in TANKDIR.
#
export MONITOR=radmon

#
# MY_RADMON should point to your working directory which contains the 
# top level directory to the RadMon package.  If you checked out the package
# as part of the GSI point to the GSI's util/Radiance_Monitor directory. If
# you checked out only the Radiance_Monitor portion of the branch then
# MY_RADMON should point to that.
#
export MY_RADMON=${MY_RADMON:-/lfs/h2/emc/da/noscrub/Edward.Safford/git/gsi/GSI/util/Radiance_Monitor}

#
#  The MY_TANKDIR will be the location for the extracted data files and
#  the control files used for image plotting.  This is the base definition 
#  and the succedding scripts will construct and use subdirectories under
#  this location.
#
export MY_TANKDIR=${MY_TANKDIR:-/lfs/h2/emc/da/noscrub/Edward.Safford/nbns}

export RUN=${RUN:-gdas}

export TANK_USE_RUN=${TANK_USE_RUN:-1}

TANKverf=${TANKverf:-${MY_TANKDIR}/stats}
TANKimg=${TANKimg:-${MY_TANKDIR}/imgn}

if [[ $RAD_AREA = "rgn" ]]; then
   TANKverf=${TANKverf}/regional
   TANKimg=${TANKimg}/regional/${RADMON_SUFFIX}
   export RUN=""
   export TANK_USE_RUN=""
else
   TANKimg=${TANKimg}/${RADMON_SUFFIX}/${RUN}
fi

export TANKverf=${TANKverf}/${RADMON_SUFFIX}
export TANKimg=${TANKimg}/radmon
export IMGNDIR=${TANKimg}/pngs


#
#  Web server resources include the sever name (WEB_SVR), the user name
#  on the web server (WEB_USER), and location of the top level directory
#  for the html on the web server (WEBDIR).
#
export WEB_SVR=${WEB_SVR:-emcrzdm}
export WEB_USER=${WEB_USER:-esafford}
export WEBDIR=${WEBDIR:-/home/people/emc/www/htdocs/gmb/gdas/radiance/esafford}


###############################################################################
###############################################################################
#                                                                             #
#  The definitions below are for internal reference and shouldn't need to be  #
#  edited, once they are set up by the RadMon_install.sh script.              #
#                                                                             #
###############################################################################
###############################################################################

export MY_MACHINE=wcoss2


#
#  Log and work space definitions
#
export MY_PTMP=${MY_PTMP:-/lfs/h2/emc/ptmp}
export PTMP_USER=${PTMP_USER:-${MY_PTMP}/${LOGNAME}}
export MY_STMP=${MY_STMP:-/lfs/h2/emc/stmp}
export STMP_USER=${STMP_USER:-${MY_STMP}/${LOGNAME}}

LOGdir=${LOGdir:-${PTMP_USER}/logs/${RADMON_SUFFIX}}
if [[ $TANK_USE_RUN -eq 1 ]]; then
   LOGdir=${LOGdir}/${RUN}
fi 
export LOGdir=${LOGdir}/radmon

export PLOT_WORK_DIR=${PLOT_WORK_DIR:-${STMP_USER}/${RADMON_SUFFIX}/${RUN}/radmon/plot}
export WORKverf_rad=${WORKverf_rad:-${STMP_USER}}
  

#
#  Definitions for internal reference
#
export RADMON_DATA_EXTRACT=${RADMON_DATA_EXTRACT:-${MY_RADMON}/data_extract}
export DE_EXEC=${DE_EXEC:-${RADMON_DATA_EXTRACT}/exec}
export DE_PARM=${DE_PARM:-${RADMON_DATA_EXTRACT}/parm}
export DE_SCRIPTS=${DE_SCRIPTS:-${RADMON_DATA_EXTRACT}/ush}

export RADMON_IMAGE_GEN=${RADMON_IMAGE_GEN:-${MY_RADMON}/image_gen}
export IG_EXEC=${IG_EXEC:-${RADMON_IMAGE_GEN}/exec}
export IG_GSCRIPTS=${IG_GSCRIPTS:-${RADMON_IMAGE_GEN}/gscripts}
export IG_PARM=${IG_PARM:-${RADMON_IMAGE_GEN}/parm}
export IG_SCRIPTS=${IG_SCRIPTS:-${RADMON_IMAGE_GEN}/ush}

export RADMON_PARM=${RADMON_PARM:-${MY_RADMON}/parm}

export HOMEgdas=${HOMEgdas:-${MY_RADMON}/nwprod/gdas_radmon}
export HOMEgfs=${HOMEgfs:-${HOMEgdas}}
export HOMEnam=${HOMEnam:-${MY_RADMON}/nwprod/nam_radmon}
export HOMEradmon=${HOMEradmon:-${MY_RADMON}/nwprod/radmon_shared}

export FIXgdas=${FIXgdas:-${HOMEgdas}/fix}
export PARMgdas=${PARMgdas:-${HOMEgdas}/parm}
export parm_file=${parm_file:-${PARMgdas}/gdas_radmon.parm}
 
export DATAROOT=${DATAROOT:-${STMP_USER}/${RADMON_SUFFIX}/${RUN}/radmon}

#
#  Definitions for parm files.  This allows users to swap in 
#  their version of the two parm files when using a central install
#  point and multiple users of the RadMon package.
#
export RADMON_CONFIG=${RADMON_CONFIG:-${RADMON_PARM}/RadMon_config}
export RADMON_USER_SETTINGS=${RADMON_USER_SETTINGS:-${RADMON_PARM}/RadMon_user_settings}


#
#  Utilities used by the RadMon package
#
export NCP=${NCP:-"/bin/cp -f"}
export Z=${Z:-"gz"}

if [[ $MY_MACHINE = "wcoss_d" ]]; then
   shell=sh
   source /usrx/local/prod/lmod/lmod/init/${shell}

   export MODULEPATH=/usrx/local/prod/lmod/lmod/modulefiles/Core:/usrx/local/prod/modulefiles/core_third:/usrx/local/prod/modulefiles/defs:/gpfs/dell1/nco/ops/nwprod/modulefiles/core_prod:/usrx/local/dev/modulefiles

   module purge

   module load ips/18.0.1.163
   module load impi/18.0.1
   module load NetCDF-parallel/4.7.4

   module load HDF5-parallel/1.10.6
   module load metplus/2.1
   module load lsf/10.1
   module load prod_util/1.1.5
   module load GrADS/2.2.0

   export GRADS=`which grads`
   export SUB="bsub"
   export COMPRESS=/usr/bin/gzip
   export UNCOMPRESS="/usr/bin/gunzip -f"

elif [[ $MY_MACHINE = "wcoss_c" ]]; then
   . /opt/modules/3.2.6.7/init/sh
   module use -a /gpfs/hps/nco/ops/nwprod/modulefiles
   module load prod_util        # defines $NDATE among other things
   module load prod_envir
   module load xt-lsfhpc
   export SUB=`which bsub`
   export COMPRESS="gzip -f"
   export UNCOMPRESS="gunzip -f"

elif [[ $MY_MACHINE = "hera" ]]; then

   module load grads/2.2.1
   export GRADS=`which grads`
   export STNMAP=`which stnmap`

   export SUB=/apps/slurm/default/bin/sbatch
   export NDATE=/home/Edward.Safford/bin/ndate
   export COMPRESS=${COMPRESS:-gzip}
   export UNCOMPRESS=${UNCOMPRESS:-"gunzip -f"}

   prevday=`$NDATE -24 $PDATE`
   export PDYm1=`echo $prevday | cut -c1-8`

elif [[ $MY_MACHINE = "s4" ]]; then

   module load grads/2.2.1
   module load license_intel/S4
   module use /data/prod/hpc-stack/modulefiles/stack
   module load hpc/1.1.0 hpc-intel/18.0.4 prod_util/1.2.2
   export GRADS=`which grads`
   export STNMAP=`which stnmap`

   export SUB=/usr/bin/sbatch
   export COMPRESS=${COMPRESS:-gzip}
   export UNCOMPRESS=${UNCOMPRESS:-"gunzip -f"}

   prevday=`$NDATE -24 $PDATE`
   export PDYm1=`echo $prevday | cut -c1-8`

elif [[ $MY_MACHINE = "jet" ]]; then

   module load grads/2.2.1
   module use /lfs4/HFIP/hfv3gfs/nwprod/hpc-stack/libs/modulefiles/stack
   module load hpc/1.1.0 hpc-intel/18.0.5.274 prod_util/1.2.2
   export GRADS=`which grads`
   export STNMAP=`which stnmap`

   export SUB=/apps/slurm/default/bin/sbatch
   export COMPRESS=${COMPRESS:-gzip}
   export UNCOMPRESS=${UNCOMPRESS:-"gunzip -f"}

   prevday=`$NDATE -24 $PDATE`
   export PDYm1=`echo $prevday | cut -c1-8`

   export RADMON_PARTITION=${RADMON_PARTITION:-kjet}

elif [[ $MY_MACHINE = "wcoss2" ]]; then
   module load prod_util/2.0.13
   module load util_shared/1.4.0

   #------------------------
   # temporary workaround
   #
   module use /apps/test/modules		
   module load GrADS/2.2.1-cce-11.0.4
   export GRADS=`which grads`
   export STNMAP=`which stnmap`
   #------------------------
   
   export SUB="qsub"
   export COMPRESS=/usr/bin/gzip
   export UNCOMPRESS="/usr/bin/gunzip -f"
fi


echo "end RadMon_config"
